{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","placeholder","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","setSelectionRange","navigator","clipboard","writeText","split","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAKe,SAASA,EAAOC,GAC3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACN,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SAEE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,sBAWJ,sBAAKF,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACE,uBAAOD,UAAU,mBAAmBM,QAASP,EAAMQ,WAAYH,KAAK,WAAWC,GAAG,2BAClF,uBAAOL,UAAU,mBAAmBQ,QAAQ,yBAA5C,wCC5BO,SAASC,EAASV,GAC7B,IA+BA,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAIF,OACI,qCACF,sBAAKZ,UAAU,YAAYa,MAAO,CAACC,MAAoB,UAAbf,EAAME,KAAe,QAAQ,SAAvE,UACE,6BAAKF,EAAMgB,UACX,qBAAKf,UAAU,OAAf,SACE,0BAAUA,UAAU,eAAcgB,MAAOL,EAAMM,SAd5B,SAACC,GAEpBN,EAAQM,EAAMC,OAAOH,QAYoDH,MAAO,CAACO,gBAA8B,UAAbrB,EAAME,KAAe,QAAQ,eAAgBa,MAAoB,UAAbf,EAAME,KAAe,QAAQ,SAAWoB,YAAY,kBAAkBhB,GAAG,QAAQiB,KAAK,QAE9O,wBAAQtB,UAAU,4BAA4BM,QA1C1B,WAElB,IAAIiB,EAAUZ,EAAKa,cACnBZ,EAAQW,GACRxB,EAAM0B,UAAU,0BAA0B,YAsC5C,kCACA,wBAAQzB,UAAU,4BAA4BM,QArCzB,WAEnB,IAAIiB,EAAUZ,EAAKe,cACnBd,EAAQW,GACRxB,EAAM0B,UAAU,0BAA0B,YAiC5C,kCACA,wBAAQzB,UAAU,4BAA4BM,QA/BxB,WAEpBM,EADc,IAEdb,EAAM0B,UAAU,WAAW,YA4B7B,wBACA,wBAAQzB,UAAU,4BAA4BM,QA1B7B,WACjB,IAAIK,EAAOgB,SAASC,eAAe,SACnCjB,EAAKkB,kBAAkB,EAAG,MAC1BC,UAAUC,UAAUC,UAAUrB,EAAKK,OACnCjB,EAAM0B,UAAU,qBAAqB,YAsBrC,0BAEF,sBAAKzB,UAAU,iBAAiBa,MAAO,CAACC,MAAoB,UAAbf,EAAME,KAAe,QAAQ,SAA5E,UACI,mDACA,8BAAIU,EAAKsB,MAAM,IAAIC,OAAnB,eAAuCvB,EAAKuB,OAA5C,iBACA,8BAAI,KAAQvB,EAAKsB,MAAM,IAAIC,OAA3B,kBACA,yCACA,4BAAIvB,EAAKuB,OAAO,EAAEvB,EAAK,kEDZ/Bb,EAAOqC,aAAe,CACdhC,MAAO,iBACPiC,UAAW,SE/BJC,MAZf,SAAetC,GAKX,OACEA,EAAMuC,OAAU,sBAAKtC,UAAS,sBAAiBD,EAAMuC,MAAMlC,KAA7B,gCAAiEmC,KAAK,QAApF,UACX,iCANY,SAACC,GAChB,IAAMC,EAAQD,EAAKd,cACnB,OAAOe,EAAMC,OAAO,GAAGlB,cAAgBiB,EAAME,MAAM,GAIvCC,CAAW7C,EAAMuC,MAAMlC,QADrB,IACsCL,EAAMuC,MAAMO,QC0DzDC,MAnDf,WACE,MAAwBpC,mBAAS,SAAjC,mBAAOT,EAAP,KAAa8C,EAAb,KACA,EAA0BrC,mBAAS,MAAnC,mBAAO4B,EAAP,KAAcU,EAAd,KAEMvB,EAAY,SAACwB,EAAS7C,GACxB4C,EAAS,CACPH,IAAKI,EACL7C,KAAMA,IAER8C,YAAW,WACTF,EAAS,QACR,OAeP,OACE,qCAIF,cAAClD,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMM,WAjBnB,WACL,SAATN,GACD8C,EAAQ,SACRpB,SAASwB,KAAKtC,MAAMO,gBAAkB,QACtCK,EAAU,8BAA8B,aAGxCsB,EAAQ,QACRpB,SAASwB,KAAKtC,MAAMO,gBAAkB,UACtCK,EAAU,6BAA6B,eAS3C,cAAC,EAAD,CAAOa,MAAOA,IAEd,qBAAKtC,UAAU,iBAAf,SAOU,cAACS,EAAD,CAAUgB,UAAWA,EAAWV,QAAQ,kCAAkCd,KAAMA,UC7C7EmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASC,eAAe,SAM1BwB,K","file":"static/js/main.795ff2cd.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to =\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to =\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        {/* <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/> */}\r\n        {/* <button className=\"btn btn-outline-success\" type=\"submit\">BECAME A MEMBER</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string, \r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n        title: \"Set title here\",\r\n        aboutText: \"About\"\r\n};\r\n","import React, {useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\" Converted to Uppercase\",\"success\")\r\n    }\r\n    const handleLowClick = () =>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\" Converted to Lowercase\",\"success\")\r\n    }\r\n\r\n    const handleClearText = () =>{\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\" Cleared\",\"success\")\r\n    }\r\n\r\n    const handleCopy = () =>{\r\n      var text = document.getElementById(\"myBox\");\r\n      text.setSelectionRange(0, 9999);\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\" Copy to Clipboard\",\"success\")\r\n\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\")\r\n        setText(event.target.value);\r\n\r\n    }\r\n    const [text, setText] = useState('');\r\n    // text = \"nskjbfjksdf\"; //this is the wrong way to set text\r\n    // setText(new text); //this is the correct way to set textc\r\n\r\n  return (\r\n      <>\r\n    <div className=\"container\" style={{color: props.mode==='light'?'black':'white'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\"value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'white':'rgb(29 49 48', color: props.mode==='light'?'black':'white' }} placeholder=\"Enter Text Here\" id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleLowClick}>Convert to LowerCase</button>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleClearText}>Clear Text</button>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color: props.mode==='light'?'black':'white'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(\"\").length} words and  {text.length} characters</p>\r\n        <p>{0.008 * text.split(\"\").length}Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter Something in the textbox above to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n      props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n// import About from './components/About';\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 1500);\n      \n  }\n  const toggleMode = () =>{\n    if(mode === 'dark'){\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been Enabled\",\"success\")\n    }\n    else{\n      setMode('dark');\n      document.body.style.backgroundColor = \"#084849\";\n      showAlert(\"Dark Mode has been Enabled\",\"success\")\n    }\n  }\n  return (\n    <>\n    \n  {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n  {/* <Router> */}\n  <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n  <Alert alert={alert}/>\n  \n  <div className=\"container my-3\">\n    \n        {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n            {/* </Route> */}\n        {/* </Switch>   */}\n  </div>\n  {/* </Router> */}\n\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}